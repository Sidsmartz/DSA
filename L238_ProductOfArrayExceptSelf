class Solution:
    def productExceptSelf(self, nums: List[int]) -> List[int]:
        n = len(nums)
        l = 1
        r = 1
        l_arr = [0] * n
        r_arr = [0] * n

        for i in range(n):
            j = -i - 1
            #As i moves upward, j moves downward

            l_arr[i] = l
            r_arr[j] = r

            l *= nums[i] #updates l and r values
            r *= nums[j]

        return [l*r for l,r in zip(l_arr,r_arr)]


#Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

#The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

#You must write an algorithm that runs in O(n) time and without using the division operation.